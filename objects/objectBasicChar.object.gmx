<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
XOffset = sprite_get_xoffset(sprite_index);
YOffset = sprite_get_yoffset(sprite_index);

// Basic Stats
MaxST = script_execute(scriptDiceRoll);
MaxDX = script_execute(scriptDiceRoll);
MaxIQ = script_execute(scriptDiceRoll);
MaxHT = script_execute(scriptDiceRoll);
MaxPer = script_execute(scriptDiceRoll);
MaxWill = script_execute(scriptDiceRoll);

ST = MaxST;
DX = MaxDX;
IQ = MaxIQ;
HT = MaxHT;
Per = MaxPer;
Will = MaxWill;

Lift = sqr(ST);
Encumberance = Lift * script_execute(scriptDiceRoll) / 3;

// Introduce yourself!
show_debug_message(string(object_get_name(object_index)) + " - ST: " + string(ST) + ", DX: " + string(DX) + ", IQ: " + string(IQ) + ", HT: " + string(HT) + ", Per: " + string(Per) + ", Will: " + string(Will) + " &amp; carrying " + string(Encumberance) + " lbs, which is " + string(floor(Encumberance / Lift)) + "x Lift.");

// Movement
MaxSpeed = (HT + DX) / 4;
MaxDodge = MaxSpeed + 3;
script_execute(scriptMoveDodgeCalc, id);
Initiative = 0;

// Equipment
Gun = script_execute(scriptGunLoad, irandom(ds_grid_height(global.GunList) - 1));
Armor = script_execute(scriptArmorLoad, irandom(ds_grid_height(global.ArmorList) - 1));
Gun.Ammo = Gun.GunMagSize;
SkillGuns = 13;
DoNothing = false; // took no action last turn

// Health &amp; Fatigue
MaxHP = 10;
HP = MaxHP;
MaxFP = 10;
FP = MaxFP;

// Health Info
Conscious = true;
Alive = true;
Shock = 0;
RecentlyWounded = false;
MortalWound = false;

// Dimensions
Height = 1; //sprite_get_height(sprite_index);
Size = 0;

// Movement Grid refernces
GridX = x / global.GridSize;
GridY = y / global.GridSize;
z = 1;
Height = 12; // Plates, standing
depth = -GridX - GridY - (10 * z);

// Movement Grid Variables
Path = path_add();
PathPoint = -1;
NextDirection = 0;
StepTimer = room_speed / 2;
TurnTimer = room_speed / 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Paused to step forward, now step forward
script_execute(scriptMoveStep);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Paused to turn; now turn and pause to step forward

image_angle = NextDirection;
alarm[1] = StepTimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Moves &lt;= 0
{Moves = Speed;
 with (objectSpace) event_user(0);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.CurrentChar == id
{event_user(2); // Movement
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// My turn!
script_execute(scriptTurnStart);

script_execute(scriptTurnEnd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement - find route

var xx, yy; //path;

// Destination coords
xx = (global.GridSize * floor(mouse_x / global.GridSize)) + XOffset;
yy = (global.GridSize * floor(mouse_y / global.GridSize)) + YOffset;

//path = path_add();

// if xx == median(max mpgrid x, min mpgrid x, xx) and yy == median(max mpgrid y, min mpgrid y, yy) // Check to see if destiniation is on-grid.
// Is the destination free?
if place_free(xx, yy)
{// Plot a course
 mp_grid_path(global.MovementGrid, Path, x, y, xx, yy, false);
  
 path_get_number(Path);
  // Start
 PathPoint = 0;
 script_execute(scriptMoveTurn);

/* // Quick Path clean-up
 var a;
 a = 0;
 path_change_point(Path, a, path_get_point_x(Path, a) + (global.GridSize / 2), path_get_point_y(Path, a) + (global.GridSize / 2), path_get_speed(Path, a));
 a = path_get_number(path) - 1;
 path_change_point(Path, a, path_get_point_x(Path, a) + (global.GridSize / 2), path_get_point_y(Path, a) + (global.GridSize / 2), path_get_speed(Path, a));*/
 

  
  
 /*// While destination is still 1 space or more away &amp; there is a path to the destination...
 while ((point_distance(x, y, xx, yy) &gt; global.GridSize) and mp_potential_path(path, xx, yy, 4, 6, false))
 {
  // Consider building an MP grid for each z layer (of permenant terrain only?) - good for tracing line-of-sight
  // Then, when need to move, condense them down to one overall grid, [add the characters to it if needed] and plan movement on that?
  
  

  // Plot a course
  // mp_potential_settings(90, 180, 8, true);
  //mp_potential_path(path, xx, yy, 4, 6, false);
 
  // Other movement options:
  //mp_potential_step(xgoal, ygoal, stepsize, checkall);
  //mp_potential_step_object(xgoal, ygoal, stepsize, obj);
   
  // What direction does the path begin in?
  var CurX, CurY, NextX, NextY, PathDir, AngleDiffs, a;
 
  CurX = path_get_x(path, 0);
  CurY = path_get_y(path, 0);
  NextX = path_get_x(path, 0.1);
  NextY = path_get_y(path, 0.1);
  PathDir = point_direction(CurX, CurY, NextX, NextY);
 
  // Figure best ways to head toward; currently written to check 90-deg increments.
  AngleDiffs = ds_grid_create(2, 4);
  for (a = 0; a &lt; 4; a += 1)
  {ds_grid_set(AngleDiffs, 0, a, a * 90);
   ds_grid_set(AngleDiffs, 1, a, abs(angle_difference(PathDir, 0)));}
  ds_grid_sort(AngleDiffs, 1, true);
  
  // Which way is clear?  Take the next-best if blocked; stop / fail if none.
  var b, c, d, e;
  for (a = 0; a &lt; 4; a += 1)
  {b = ds_grid_get(AngleDiffs, 0, a);
    show_debug_message("option: " + string(a) + "; direction: " + string(b));
   c = lengthdir_x(global.GridSize, b);
   d = lengthdir_y(global.GridSize, b);
   if place_free(x + c, y + d)
   {//MoveDirection = b;
    x += c;
    y += d;
    event_user(0);
    break;}}
   
  ds_grid_destroy(AngleDiffs);
 } // LOOP END*/
}
else
{// The destination isn't clear.
}
//path_delete(path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Grid Coords
GridX = x / global.GridSize;
GridY = y / global.GridSize;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recenter Screen on Player
view_xview[0] = x - (view_wview[0] / 2);
view_yview[0] = y - (view_hview[0] / 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_path(Path, 0, 0, true);
draw_text(x, y + 32, string(path_get_number(Path)) + ", " + string(PathPoint));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
