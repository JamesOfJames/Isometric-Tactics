<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Message Fade-in
if ds_grid_height(global.Message) &gt; MaxMessages
{}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Message Cycler
script_execute(scriptMessagePop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Message Control

// Check for new messages
if !ds_queue_empty(global.NewMessage)
{if alarm[0] &lt;= 0
 {if alarm[1] &lt;= 0
  {alarm[0] = MessageAlarm;}}}
 
// Check for old messages or too many messages
if ds_grid_height(global.Message) &gt; 0
{if ds_grid_get(global.Message, 0, 0) &lt;= 0 or ds_grid_height(global.Message) &gt; MaxMessages
 {var b, c;
  for (b = 0; b &lt; ds_grid_height(global.Message) - 1; b += 1)
  {for (c = 0; c &lt; 2; c += 1)
   {ds_grid_set(global.Message, c, b, ds_grid_get(global.Message, c, b + 1));}}
  if ds_grid_height(global.Message) &gt; 1
  {ds_grid_resize(global.Message, 2, ds_grid_height(global.Message) - 1);}}
 
 // Fade out
 if ds_grid_height(global.Message) &gt;= MaxMessages
 {if !ds_queue_empty(global.NewMessage)
  {if ds_grid_get(global.Message, 0, 0) &gt; MessageAlarm
   {ds_grid_set(global.Message, 0, 0, MessageAlarm);}}}
  
 // Increment each step
 ds_grid_add_region(global.Message, 0, 0, 0, ds_grid_height(global.Message) - 1, -1);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="8">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cycle Turns
with objectBasicChar {Initiative += Speed;}
ds_grid_resize(global.Initiative, 3, instance_number(objectBasicChar));
ds_grid_clear(global.Initiative, -1);

// Create Array of Characters, sort them by initiative.
var i, a, b;
i = ds_grid_create(2, instance_number(objectBasicChar));
for (a = 0; a &lt; instance_number(objectBasicChar); a += 1)
{b = instance_find(objectBasicChar, a);
 ds_grid_set(i, 0, a, b);
 ds_grid_set(i, 1, a, b.Initiative);}
ds_grid_sort(i, 1, true);

// Check for duplicate values
var c, d, e, f, g, h, j;
d = ds_grid_get_max(i, 1, 0, 1, ds_grid_height(i) - 1);
e = ds_grid_get_min(i, 1, 0, 1, ds_grid_height(i) - 1);
for (c = d; c &gt; e; c -= .25)
{if ds_grid_value_exists(i, 1, 0, 1, ds_grid_height(i) - 1, c)
 {f = ds_grid_value_y(i, 1, 0, 1, ds_grid_height(i) - 1, c);
  if ds_grid_height(i) &gt; 1
  {// Check for multiples
   for (g = 1; g &lt; ds_grid_height(i) - 1; g += 1)
   {if ds_grid_value_exists(i, 1, 0, 1, ds_grid_height(i) - g, c)
    {h = ds_grid_value_y(i, 1, 0, 1, ds_grid_height(i) - g, c);}}
   j = f - h;} // How many multiples of these speed?
  else {j = 0;}
  
  // Add everyone to Order List
  var k, l, m, n, o
  for (k = 0; k &lt; ds_grid_height(global.Initiative) - 1; k += 1)
  {do
   {l = irandom(j);
    m = ds_grid_get(i, 0, ds_grid_height(i) - 1 - l); // next instance; swapping to last place.
    n = ds_grid_get(i, 0, ds_grid_height(i) - 1); // last-place instance.
    ds_grid_set(i, 0, ds_grid_height(i) - 1, m);
    ds_grid_set(i, 0, ds_grid_height(i) - 1 - l, n);
    ds_grid_set(global.Initiative, 0, k, ds_grid_get(i, 0, ds_grid_height(i) - 1));
    ds_grid_set(global.Initiative, 1, k, ds_grid_get(i, 1, ds_grid_height(i) - 1));
    ds_grid_set(global.Initiative, 2, k, false);  
    ds_grid_resize(i, 2, ds_grid_height(i) - 1);
    j -= 1;}
    until (j &lt; 0);}}}

// Clean up
ds_grid_destroy(i);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear all the data structures

ds_map_destroy(Paths);
ds_list_destroy(TruePath);
ds_map_destroy(Costs);
ds_grid_destroy(MyGraph);
ds_grid_destroy(MyWeights);
ds_grid_destroy(MoveWeight);
ds_map_destroy(TerrainMap);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Weapons Table


GunDmg = 3;
GunArmorDiv = 3;
GunDmgType = "pi-"
GunAcc = 3;
GunRange = 500;
GunMaxRange = 2100;
GunROF = 3;
GunShots = 40;
Ammo = GunShots;
GunReload = 3;
GunRcl = 2;

var a, b;
b = 4; // Number of Guns
a = 20; // Number of Stats

global.GunList = ds_grid_create(a, b);

c = 0;

// Gun Data
ds_grid_set(global.GunList, 0, c, "Pistol"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Medium Pistol, 7.5mmCLP"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 2); // Damage Dice
ds_grid_set(global.GunList, 4, c, 2); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi"); // Damage Type
ds_grid_set(global.GunList, 6, c, 2); // Accuracy
ds_grid_set(global.GunList, 7, c, 150); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 1900); // Extreme Range
ds_grid_set(global.GunList, 9, c, 2); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 0.5); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 30); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 9); // Strength
ds_grid_set(global.GunList, 15, c, false); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -2); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 2); // Recoil
ds_grid_set(global.GunList, 18, c, 450); // Price
ds_grid_set(global.GunList, 19, c, 3); // Legality
c++;

ds_grid_set(global.GunList, 0, c, "SMG"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Machine Pistol, 10mmCLP"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 3); // Damage Dice
ds_grid_set(global.GunList, 4, c, 0); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi+"); // Damage Type
ds_grid_set(global.GunList, 6, c, 2); // Accuracy
ds_grid_set(global.GunList, 7, c, 180); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 2000); // Extreme Range
ds_grid_set(global.GunList, 9, c, 3); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 1); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 30); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 10); // Strength
ds_grid_set(global.GunList, 15, c, false); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -2); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 3); // Recoil
ds_grid_set(global.GunList, 18, c, 750); // Price
ds_grid_set(global.GunList, 19, c, 2); // Legality
c++;

ds_grid_set(global.GunList, 0, c, "Rifle"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Hunting Rifle, 7mmCL"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 6); // Damage Dice
ds_grid_set(global.GunList, 4, c, 1); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi"); // Damage Type
ds_grid_set(global.GunList, 6, c, 4); // Accuracy
ds_grid_set(global.GunList, 7, c, 750); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 4200); // Extreme Range
ds_grid_set(global.GunList, 9, c, 7); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 0.3); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 10); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 9); // Strength
ds_grid_set(global.GunList, 15, c, true); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -5); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 2); // Recoil
ds_grid_set(global.GunList, 18, c, 800); // Price
ds_grid_set(global.GunList, 19, c, 3); // Legality
c++;

ds_grid_set(global.GunList, 0, c, "Shotgun"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Shotgun Pistol, 18.5mmPC"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 4); // Damage Dice
ds_grid_set(global.GunList, 4, c, 0); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi++"); // Damage Type
ds_grid_set(global.GunList, 6, c, 1); // Accuracy
ds_grid_set(global.GunList, 7, c, 100); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 500); // Extreme Range
ds_grid_set(global.GunList, 9, c, 4); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 0.7); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 5); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 10); // Strength
ds_grid_set(global.GunList, 15, c, false); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -3); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 5); // Recoil
ds_grid_set(global.GunList, 18, c, 330); // Price
ds_grid_set(global.GunList, 19, c, 3); // Legality
c++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Armor Table

var a, b;
b = 2; // Number of Armors
a = 11; // Number of Stats

/*damage locations
ALL
 head
  skull
  eyes
  face
FULL
 suit
  body
   neck
   torso
    front
    back
   groin
  limbs
   arms
   * hands if FULL
   legs
   * feet if FULL*/          

global.ArmorList = ds_grid_create(a, b);

c = 0;

// Armor Data
ds_grid_set(global.ArmorList, 0, c, "Concealable Ballistic Armor"); // Armor Type
ds_grid_set(global.ArmorList, 1, c, 9); // Tech Level
ds_grid_set(global.ArmorList, 2, c, "Reflex Bodysuit"); // Armor Name
ds_grid_set(global.ArmorList, 3, c, "body, limbs"); // Damage Locations
ds_grid_set(global.ArmorList, 4, c, 12); // High DR
ds_grid_set(global.ArmorList, 5, c, 4); // Low DR
ds_grid_set(global.ArmorList, 6, c, "pi- pi pi+ pi++ cut"); // effective against
ds_grid_set(global.ArmorList, 7, c, false); // Flexible?
ds_grid_set(global.ArmorList, 8, c, 900); // Weight
ds_grid_set(global.ArmorList, 9, c, 6); // Price
ds_grid_set(global.ArmorList, 10, c, 3); // Legality
c++;

ds_grid_set(global.ArmorList, 0, c, "Concealable Ballistic Armor"); // Armor Type
ds_grid_set(global.ArmorList, 1, c, 10); // Tech Level
ds_grid_set(global.ArmorList, 2, c, "Nanoweave Bodysuit"); // Armor Name
ds_grid_set(global.ArmorList, 3, c, "body, limbs"); // Damage Locations
ds_grid_set(global.ArmorList, 4, c, 18); // High DR
ds_grid_set(global.ArmorList, 5, c, 6); // Low DR
ds_grid_set(global.ArmorList, 6, c, "pi- pi pi+ pi++ cut"); // effective against
ds_grid_set(global.ArmorList, 7, c, false); // Flexible?
ds_grid_set(global.ArmorList, 8, c, 900); // Weight
ds_grid_set(global.ArmorList, 9, c, 6); // Price
ds_grid_set(global.ArmorList, 10, c, 3); // Legality
c++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Message System
global.Message = ds_grid_create(2, 0); // timeout, Message, (x, y, opacity?)
global.NewMessage = ds_queue_create();

MessageLineHeight = 16;
MessageAlarm = room_speed / 2;
MessageTimeout = room_speed * 15;
LineSize = 16;
MaxMessages = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Play

randomize();
image_speed = 0;

// Get the template tile used for defining the size of an isometric tile
templateTile = spriteStud;
global.TileHeight = sprite_get_bbox_bottom(templateTile) - sprite_get_bbox_top(templateTile);
global.TileWidth = sprite_get_bbox_right(templateTile) - sprite_get_bbox_left(templateTile);
global.PlateHeight = sprite_get_height(templateTile) - sprite_get_bbox_bottom(templateTile);
if global.TileHeight mod 2 != 0 {global.TileHeight++;}
if global.TileWidth mod 2 != 0 {global.TileWidth++;}

// Find grid size, create grid
global.GridSize = 32 // arbitrary, for now.
var gs = global.GridSize;
global.MovementGrid = path_finder_grid_declare(floor(room_width / gs), floor(room_height / gs));
var W = ds_grid_width(global.MovementGrid);
var H = ds_grid_height(global.MovementGrid);

ShowOutlines = true;
ShowCosts = true;

// Create Walls
var d, e, f;
for (e = 0; e &lt; H; e += 1)
{for (d = 0; d &lt; W; d += 1) 
 {if random(1) &lt; .02 // Arbitrary chance to create
  {// Generate a wall
   if irandom(1) == 1
   {// Vertical wall
    if e + 2 &lt; H - 1
    {mask_index = spriteWall;
     image_index = 0;
     if place_empty(d * gs, e * gs)
     {f = instance_create(d * gs, e * gs, objectWall);
      f.GridX = d;
      f.GridY = e;
      f.z = 1;
      f.image_index = 0;
      f.depth = -f.y;}
     else
     {show_debug_message(string(d) + "," +string(3)+" isn't clear for a V wall");}}}
   else
   {// Horizontal wall
    if d + 2 &lt; W - 1
    mask_index = spriteWall;
    image_index = 1;
    {if place_empty(d * gs, e * gs)
     {f = instance_create(d * gs, e * gs, objectWall);
      f.GridX = d;
      f.GridY = e;
      f.z = 1;
      f.image_index = 1;
      f.depth = -f.y;}
     else
     {show_debug_message(string(d) + "," +string(3)+" isn't clear for an H wall");}}}}}}

path_finder_grid_instance_set_as_wall(global.MovementGrid, gs, objectWall);

// Figure Clearance Grids based on permenant obstacles
global.ClearanceGrid = ds_grid_create(W, H);
var k, l, m;
for (e = H - 1; e &gt;= 0; e -= 1) // check from bottom
{for (d = W - 1; d &gt;= 0; d -= 1) // check from right
 {show_debug_message("checking " + string(d) + ", " + string(e));
  for (k = 1; k &lt; 3 /*min(d, e)*/; k += 1) // check k = agent size clearance
  {show_debug_message("  size: " + string(k));
   for (m = e; m &gt; e - k; m -= 1) // check from bottom to k spaces up
   {for (l = d; l &gt; d - k; l -= 1) // check from right to k spaces left
    {show_debug_message("   checking " + string(l) + ", " + string(m));
     if path_finder_grid_in_bounds(global.MovementGrid, l, m)
     {if global.MovementGrid[#l, m] != 0
      {show_debug_message("max clearance is " + string(k));
       ds_grid_set(global.ClearanceGrid, d, e, k - 1);
       break;}}}}}}}

image_index = 0;

// Create Player  
var c, g, h, i, j;
i = sprite_get_xoffset(object_get_sprite(objectBasicPlayer)) mod gs;
j = sprite_get_yoffset(object_get_sprite(objectBasicPlayer)) mod gs;
mask_index = object_get_sprite(objectBasicPlayer);
do
{g = irandom(W);
 h = irandom(H);}
until (place_empty((g * gs) + i, (h * gs) + j));
c = instance_create((g * gs) + i, (h * gs) + j, objectBasicPlayer);
with c
{
}

// The player is always moving, for now.
global.CurrentChar = c;

// Create Enemy
i = sprite_get_xoffset(object_get_sprite(objectBasicEnemy)) mod gs;
j = sprite_get_yoffset(object_get_sprite(objectBasicEnemy)) mod gs;
mask_index = object_get_sprite(objectBasicEnemy);
do
{g = irandom(W);
 h = irandom(H);}
until (place_empty((g * gs) + i, (h * gs) + j));
c = instance_create((g * gs) + i, (h * gs) + j, objectBasicEnemy);
with c
{
}

global.Initiative = ds_grid_create(3, instance_number(objectBasicChar));

path_finder_grid_instance_set_as_wall(global.MovementGrid, gs, objectBasicChar);

TerrainMap = ds_map_create();
//I Reccomend Creating Constants for your Terrain types but since constants don't ship with Marketplace Assets they are real values
ds_map_add(TerrainMap, 1, 9999); // Wall Case, doesn't need to be there but incase passable returns true when it shouldn't a high cost prevents us from going in it.
ds_map_add(TerrainMap, 0, 1); // Standard Floor
ds_map_add(TerrainMap, -1, 9); // It costs more to tranverse water
ds_map_add(TerrainMap, -2, 12); // Extra Cost for this terrain

MyWeights = path_finder_grid_declare_weights(global.MovementGrid, TerrainMap, 1);
MoveWeight = path_finder_directional_weight_grid_declare(sqrt(2), 1, sqrt(2), 1, 1, sqrt(2), 1, sqrt(2));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Welcome Messages

script_execute(scriptMessageAdd, "-------------------------------------------------------------------------------------------------");
script_execute(scriptMessageAdd, "Welcome to the first tech demo of James's tactics game.");
script_execute(scriptMessageAdd, "So far, the only things that are implemented are basic movement (left click) and attacking (space bar.)");
script_execute(scriptMessageAdd, "Scroll the map with the arrow keys.");
script_execute(scriptMessageAdd, "Next up, figure movement with 2x2 characters, figure line-of-sight attacking, &amp; rework the perspective to isometric.");
script_execute(scriptMessageAdd, "Please send feedback to iamjamesshepherd@gmail.com or @JamesOfJames on twitter!");
script_execute(scriptMessageAdd, "-------------------------------------------------------------------------------------------------");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Messages

if ds_grid_height(global.Message) &gt; 0
{if alarm[0] &gt; 0 // If scrolling for a new message
 {YOffset = LineSize * (cos(pi * alarm[0] / MessageAlarm) + 1) / 2;} // Starts at 1 -&gt; 0 as the timer runs out
 else
 {YOffset = 0;}
 
 // Draw text
 draw_set_colour(c_black);

 var a, b, c, d;
 b = ds_grid_height(global.Message); // Most recent message
 for (a = 0; a &lt; b; a += 1)
 {// Figure Opacity
  c = 1;
  d = ds_grid_get(global.Message, 0, a);
  
  // New Message
  if a == b - 1 and alarm[1] &gt; 0
  {if alarm[1] &gt; 0
   {c = min(c, (MessageAlarm - alarm[1]) / MessageAlarm);}}
  
  // Too Many Messages
  if a == 0
  {if b &gt;= MaxMessages
   {if alarm[1] &gt; 0
    {if !ds_queue_empty(global.NewMessage)
     {c = min(c, alarm[1] / MessageAlarm);}}}}
  
  // Old Message
  if d &lt; MessageAlarm
  {c = min(c, d / MessageAlarm);}

  draw_set_alpha(c);
 
  yy = view_hport[0] - (LineSize * (ds_grid_height(global.Message) - a)) - YOffset; // top line position
  draw_text(16, yy, ds_grid_get(global.Message, 1, a));}}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Movement Grid

/*draw_set_alpha(0.3);
mp_grid_draw(global.MovementGrid);
draw_set_alpha(1);

draw_text(mouse_x, mouse_y - 16, string(floor(mouse_x / global.GridSize)) + ", " + string(floor(mouse_y / global.GridSize)))*/

// NEW SHIT
var gs = global.GridSize;
var S, G;

// Draws the Path Finder Grid
//demo_path_finder_grid_draw(global.MovementGrid, gs, 0, 0) ;

/*if (ds_exists(TruePath, ds_type_list))
{draw_text(32, view_hview[0] - 32, "Length of Path: " + string(TruePathLength));}
else
{draw_text(32, view_hview[0] - 32, "No Path to Goal");}

// Draws all the paths
draw_set_colour(c_red);
demo_path_finder_grid_draw_paths(global.MovementGrid, Paths, gs, gs, gs) ;

// Draws the path from the start to the goal
draw_set_colour(c_blue);
if (path_finder_can_reach_goal(Paths, S, G))
{demo_path_finder_grid_draw_true_path(global.MovementGrid, Paths,gs,gs,gs,S,G);}


draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

// Draws the Start and the End
draw_text((path_finder_grid_cell_get_x(global.MovementGrid, S) + .5) * gs + gs,(path_finder_grid_cell_get_y(global.MovementGrid, S) + .5) * gs + gs, "S") ;
draw_text((path_finder_grid_cell_get_x(global.MovementGrid, G) + .5) * gs + gs,(path_finder_grid_cell_get_y(global.MovementGrid, G) + .5) * gs + gs, "G") ;

// Draws the Costs
if (ShowCosts)
{demo_path_finder_draw_costs(global.MovementGrid, Costs, gs, gs, gs);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
