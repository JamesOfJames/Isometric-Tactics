<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

// Get the template tile used for defining the size of an isometric tile
templateTile = spriteStud;
global.TileHeight = sprite_get_bbox_bottom(templateTile) - sprite_get_bbox_top(templateTile);
global.TileWidth = sprite_get_bbox_right(templateTile) - sprite_get_bbox_left(templateTile);

if global.TileHeight mod 2 != 0 {global.TileHeight++;}
if global.TileWidth mod 2 != 0 {global.TileWidth++;}

show_debug_message("TileHeight = " + string(global.TileHeight));
show_debug_message("TileWidth = " + string(global.TileWidth));

// Find grid size, create grid
global.GridSize = 32 // arbitrary, for now.
GridWidth = 32; // arbitrary, for now.
GridHeight = 32; // arbitrary, for now.
global.MovementGrid = mp_grid_create(0, 0, GridWidth, GridHeight, global.GridSize, global.GridSize);
global.Grid = ds_grid_create(GridWidth, GridHeight);
ds_grid_clear(global.Grid, 0);
    
// Create Walls &amp; Floor
var d, e, f;
for (e = 0; e &lt; ds_grid_height(global.Grid); e += 1)
{for (d = 0; d &lt; ds_grid_width(global.Grid); d += 1) 
 {if random(1) &lt; .01
  {// Generate a wall
   if irandom(1) == 1
   {// Vertical wall
    if e + 5 &lt; ds_grid_height(global.Grid)
    {if ds_grid_get_sum(global.Grid, d, e, d, e + 5) == 0
     {f = instance_create(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e), objectWall);
      f.GridX = d;
      f.GridY = e;
      f.depth = -f.y;
      f.image_index = 0;}}}
   else
   {// Horizontal wall
    if d + 5 &lt; ds_grid_width(global.Grid)
    {if ds_grid_get_sum(global.Grid, d, e, d + 5, e) == 0
     {f = instance_create(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e), objectWall);
      f.GridX = d;
      f.GridY = e;
      f.depth = -f.y;
      f.image_index = 1;}}}}
  // Floor
  if d mod 6 == 0 and e mod 6 == 0
  {f = instance_create(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e), objectSpace);
   f.GridX = d;
   f.GridY = e;
   f.depth = -f.y;
   if (d + e) mod 2 != 0
   {f.sprite_index = spriteSpace2}}}}

// Translate raw data to grids
var a, b;
for (a = 0; a &lt; GridHeight; a += 1)
{for (b = 0; b &lt; GridWidth; b += 1)
 {if !place_free(script_execute(scriptIsoToCoordX, b, a), script_execute(scriptIsoToCoordY, b, a))
  {mp_grid_add_cell(global.MovementGrid, b, a);}}}

     
// Create Player  
var c, g, h;
g = irandom(GridWidth);
h = irandom(GridHeight);
c = instance_create(script_execute(scriptIsoToCoordX, g, h), script_execute(scriptIsoToCoordY, g, h), objectPlayer);
with c
{
}
/*
// Create Enemy
g = irandom(GridWidth);
h = irandom(GridHeight);
c = instance_create(script_execute(scriptIsoToCoordX, g, h), script_execute(scriptIsoToCoordY, g, h), objectPlayer);
with c
{
}
 
with (objectSpace) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.3);
mp_grid_draw(global.MovementGrid);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
