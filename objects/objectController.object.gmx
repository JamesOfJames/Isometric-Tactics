<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cycle Turns

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup

randomize();
image_speed = 0;

// Get the template tile used for defining the size of an isometric tile
templateTile = spriteStud;
global.TileHeight = sprite_get_bbox_bottom(templateTile) - sprite_get_bbox_top(templateTile);
global.TileWidth = sprite_get_bbox_right(templateTile) - sprite_get_bbox_left(templateTile);
global.PlateHeight = sprite_get_height(templateTile) - sprite_get_bbox_bottom(templateTile);
if global.TileHeight mod 2 != 0 {global.TileHeight++;}
if global.TileWidth mod 2 != 0 {global.TileWidth++;}

// Find grid size, create grid
global.GridSize = 32 // arbitrary, for now.
GridWidth = 36; // arbitrary, for now.
GridHeight = 36; // arbitrary, for now.
global.MovementGrid = mp_grid_create(0, 0, GridWidth, GridHeight, global.GridSize, global.GridSize);
global.Grid = ds_grid_create(GridWidth, GridHeight);
ds_grid_clear(global.Grid, 0);
    
// Create Walls &amp; Floor
var d, e, f, g;
for (e = 0; e &lt; ds_grid_height(global.Grid); e += 1)
{for (d = 0; d &lt; ds_grid_width(global.Grid); d += 1) 
 {if random(1) &lt; .02
  {// Generate a wall
   if irandom(1) == 1
   {// Vertical wall
    if e + 5 &lt; ds_grid_height(global.Grid)
    {mask_index = spriteVertWallMask;
     image_index = 0;
     if place_free(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e))
     {f = instance_create(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e), objectVertWall);
      f.GridX = d;
      f.GridY = e;
      f.z = 1;
      f.depth = -script_execute(scriptCoordsToIsoX, f.x, f.y) - script_execute(scriptCoordsToIsoY, f.x, f.y) - (10 * f.z);}}}
   else
   {// Horizontal wall
    if d + 5 &lt; ds_grid_width(global.Grid)
    {mask_index = spriteHorizWallMask;
     image_index = 1;
     if place_free(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e))
     {f = instance_create(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e), objectHorizWall);
      f.GridX = d;
      f.GridY = e;
      f.z = 1;
      f.depth = -script_execute(scriptCoordsToIsoX, f.x, f.y) - script_execute(scriptCoordsToIsoY, f.x, f.y) - (10 * f.z);}}}}
  // Floor
  if d mod 6 == 0 and e mod 6 == 0
  {f = instance_create(script_execute(scriptIsoToCoordX, d, e), script_execute(scriptIsoToCoordY, d, e), objectSpace);
   f.GridX = d;
   f.GridY = e;
   f.z = 0;
   f.depth = -script_execute(scriptCoordsToIsoX, f.x, f.y) - script_execute(scriptCoordsToIsoY, f.x, f.y) - (10 * f.z);
   if (d + e) mod 2 != 0
   {f.sprite_index = spriteSpace2}}}}

// Translate raw data to grids
mask_index = spriteStud;
var a, b;
for (a = 0; a &lt; GridHeight; a += 1)
{for (b = 0; b &lt; GridWidth; b += 1)
 {if !place_free(script_execute(scriptIsoToCoordX, b, a), script_execute(scriptIsoToCoordY, b, a))
  {mp_grid_add_cell(global.MovementGrid, b, a);}}}

     
// Create Player  
var c, g, h;
g = irandom(GridWidth);
h = irandom(GridHeight);
c = instance_create(script_execute(scriptIsoToCoordX, g, h), script_execute(scriptIsoToCoordY, g, h), objectPlayer);
with c
{
}
/*
// Create Enemy
g = irandom(GridWidth);
h = irandom(GridHeight);
c = instance_create(script_execute(scriptIsoToCoordX, g, h), script_execute(scriptIsoToCoordY, g, h), objectPlayer);
with c
{
}
 
with (objectSpace) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapons &amp; Armor Data


GunDmg = 3;
GunArmorDiv = 3;
GunDmgType = "pi-"
GunAcc = 3;
GunRange = 500;
GunMaxRange = 2100;
GunROF = 3;
GunShots = 40;
Ammo = GunShots;
GunReload = 3;
GunRcl = 2;

var a, b;
b = 4; // Number of Guns
a = 20; // Number of Stats

global.GunList = ds_grid_create(a, b);

c = 0;

// Gun Data
ds_grid_set(global.GunList, 0, c, "Pistol"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Medium Pistol, 7.5mmCLP"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 2); // Damage Dice
ds_grid_set(global.GunList, 4, c, 2); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi"); // Damage Type
ds_grid_set(global.GunList, 6, c, 2); // Accuracy
ds_grid_set(global.GunList, 7, c, 150); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 1900); // Extreme Range
ds_grid_set(global.GunList, 9, c, 2); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 0.5); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 30); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 9); // Strength
ds_grid_set(global.GunList, 15, c, false); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -2); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 2); // Recoil
ds_grid_set(global.GunList, 18, c, 450); // Price
ds_grid_set(global.GunList, 19, c, 3); // Legality
c++;

ds_grid_set(global.GunList, 0, c, "SMG"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Machine Pistol, 10mmCLP"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 3); // Damage Dice
ds_grid_set(global.GunList, 4, c, 0); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi+"); // Damage Type
ds_grid_set(global.GunList, 6, c, 2); // Accuracy
ds_grid_set(global.GunList, 7, c, 180); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 2000); // Extreme Range
ds_grid_set(global.GunList, 9, c, 3); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 1); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 30); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 10); // Strength
ds_grid_set(global.GunList, 15, c, false); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -2); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 3); // Recoil
ds_grid_set(global.GunList, 18, c, 750); // Price
ds_grid_set(global.GunList, 19, c, 2); // Legality
c++;

ds_grid_set(global.GunList, 0, c, "Rifle"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Hunting Rifle, 7mmCL"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 6); // Damage Dice
ds_grid_set(global.GunList, 4, c, 1); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi"); // Damage Type
ds_grid_set(global.GunList, 6, c, 4); // Accuracy
ds_grid_set(global.GunList, 7, c, 750); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 4200); // Extreme Range
ds_grid_set(global.GunList, 9, c, 7); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 0.3); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 10); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 9); // Strength
ds_grid_set(global.GunList, 15, c, true); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -5); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 2); // Recoil
ds_grid_set(global.GunList, 18, c, 800); // Price
ds_grid_set(global.GunList, 19, c, 3); // Legality
c++;

ds_grid_set(global.GunList, 0, c, "Shotgun"); // Weapon Type
ds_grid_set(global.GunList, 1, c, 9); // Tech Level
ds_grid_set(global.GunList, 2, c, "Shotgun Pistol, 18.5mmPC"); // Weapon Name
ds_grid_set(global.GunList, 3, c, 4); // Damage Dice
ds_grid_set(global.GunList, 4, c, 0); // Damage Add
ds_grid_set(global.GunList, 5, c, "pi++"); // Damage Type
ds_grid_set(global.GunList, 6, c, 1); // Accuracy
ds_grid_set(global.GunList, 7, c, 100); // Half Damage Range
ds_grid_set(global.GunList, 8, c, 500); // Extreme Range
ds_grid_set(global.GunList, 9, c, 4); // Weapon Weight
ds_grid_set(global.GunList, 10, c, 0.7); // Magazine Weight
ds_grid_set(global.GunList, 11, c, 3); // Rate of Fire
ds_grid_set(global.GunList, 12, c, 5); // Shots / Magazine
ds_grid_set(global.GunList, 13, c, 3); // Reload Time
ds_grid_set(global.GunList, 14, c, 10); // Strength
ds_grid_set(global.GunList, 15, c, false); // Two-Handed?
ds_grid_set(global.GunList, 16, c, -3); // Bulk penalty
ds_grid_set(global.GunList, 17, c, 5); // Recoil
ds_grid_set(global.GunList, 18, c, 330); // Price
ds_grid_set(global.GunList, 19, c, 3); // Legality
c++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_alpha(0.3);
mp_grid_draw(global.MovementGrid);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
