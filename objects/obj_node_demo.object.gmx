<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Show_Connections = true ;
Show_Path        = true ;


randomize() ;


global.NODE_SIZE = 32 ;



/*
** Type Index
** 0 - Normal Ground
**
**
*/

SelectedNode = 0 ;

random_amount = 20;
node_size = 0 ;

for(var i = 0 ; i &lt; random_amount ; i++)
    {
    var Y = irandom_range(96,room_height-96) ;
    var X = 32 + 48*i ;
    Node[i] = pathfinder_node_create(X,Y,0) ;
    node_size = i ; 
    }
    
for(var i = 0 ; i &lt; random_amount ; i++)
    {
    var L = ds_list_create() ;
    var C = ds_list_create() ;
    var Nex = i + irandom_range(1,3) ;
    var Pre = i - irandom_range(1,3) ;
    var Alt = Nex + 1 ;
    if (Nex &gt; node_size) { Nex -= node_size ; } ;
    if (Pre &lt; 0 ) { Pre += node_size ; } ; 
    if (Alt &gt; node_size ) { Alt -= node_size ; } ; 
    
    ds_list_add(C,irandom_range(1,3),irandom_range(2,5),1) ;
    ds_list_add(L,Node[Nex],Node[Pre],Node[Alt]) ;
    pathfinder_node_add_connections(Node[i],L) ;
    pathfinder_node_add_connected_costs(Node[i],C) ;
    }

SelectedSearch = 0 ; 


BFS = pathfinder_node_breadth_first_search(Node,Node[0],Node[3]) ;

Path  = path_finder_path_to_goal(BFS,Node[0],Node[3]) ;

if ds_exists(Path,ds_type_list)
    {
    ds_list_print_to_console("PATH","END PATH",Path) ;
    }


TypeMap = pathfinder_node_create_type_map(1) ;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord("1")))
    {
    SelectedSearch = 0 ;
    }
if (keyboard_check_pressed(ord("2")))
    {
    SelectedSearch = 1 ;
    }
if (keyboard_check_pressed(ord("3")))
    {
    SelectedSearch = 2 ;
    }
if (keyboard_check_pressed(ord("4"))) 
    {
    SelectedSearch = 3 ;
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black) ;
draw_text(32,32,"Selected Search : " + string(SelectedSearch)) ;


if (keyboard_check_pressed(ord("C")))
    {
    Show_Connections = !Show_Connections ;
    }
if (keyboard_check_pressed(ord("P")))
    {
    Show_Path = !Show_Path ;
    }
    
pathfinder_node_debug_draw_nodes(Node,c_black,16) ;

if (Show_Connections)
    {
    for(var i = 0 ; i &lt; node_size ;i++)
        {
        pathfinder_node_debug_draw_connections(Node[i],c_red,c_blue)
        }
    }
    
pathfinder_node_debug_draw_node_numbers(Node,c_white) ;

if (Show_Path)
    {
    pathfinder_node_highlight_path(Path,c_green) ;
    }
    
var Clo = pathfinder_node_closest_to_point(Node,mouse_x,mouse_y,1) ;

pathfinder_node_debug_draw_connection_costs(Clo,c_green) ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(SelectedSearch)
    {
    case 0 : 
            {
            Search = pathfinder_node_breadth_first_search(Node,Node[0],Node[3]) ;
            }
            ;break ;
    case 1 :
            {
            Search = pathfinder_node_greedy_first_search(Node,Node[0],Node[3]) ;
            }
            ;break ;
    case 2 :
            {
            Search = pathfinder_node_a_star_search(Node,TypeMap,Node[0],Node[3],0) ;
            }
            ;break;
    case 3 :
            {
            Search = pathfinder_node_dijkstra_search(Node,TypeMap,Node[0],Node[3],0) ;
            }
            ;break;
    }
    
    
Path = path_finder_path_to_goal(Search,Node[0],Node[3]) ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
game_restart() ;

var S = array_length_1d(Node) ;
for(var i = 0 ; i &lt; S ; i++)
    {
    var C = pathfinder_node_get_connections(Node[i]) ;
    if (ds_exists(C,ds_type_list))
        {
        ds_list_destroy(C) ;
        }
    ds_map_destroy(Node[i]) ;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
